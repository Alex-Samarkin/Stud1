//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.10.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Stud1.HelperClasses;
using Stud1.FactoryClasses;
using Stud1.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace Stud1.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'Person'.<br/><br/></summary>
	[Serializable]
	public partial class PersonEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<AddressEntity> _address;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static PersonEntityStaticMetaData _staticMetaData = new PersonEntityStaticMetaData();
		private static PersonRelations _relationsFactory = new PersonRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Address</summary>
			public static readonly string Address = "Address";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class PersonEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public PersonEntityStaticMetaData()
			{
				SetEntityCoreInfo("PersonEntity", InheritanceHierarchyType.None, false, (int)Stud1.EntityType.PersonEntity, typeof(PersonEntity), typeof(PersonEntityFactory), false);
				AddNavigatorMetaData<PersonEntity, EntityCollection<AddressEntity>>("Address", a => a._address, (a, b) => a._address = b, a => a.Address, () => new PersonRelations().AddressEntityUsingPersonId, typeof(AddressEntity), (int)Stud1.EntityType.AddressEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static PersonEntity()
		{
		}

		/// <summary> CTor</summary>
		public PersonEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public PersonEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this PersonEntity</param>
		public PersonEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Person which data should be fetched into this Person object</param>
		public PersonEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Person which data should be fetched into this Person object</param>
		/// <param name="validator">The custom validator object for this PersonEntity</param>
		public PersonEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected PersonEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'Address' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoAddress() { return CreateRelationInfoForNavigator("Address"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this PersonEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static PersonRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Address' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathAddress { get { return _staticMetaData.GetPrefetchPathElement("Address", CommonEntityBase.CreateEntityCollection<AddressEntity>()); } }

		/// <summary>The Id property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."Id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)PersonFieldIndex.Id, true); }
			set	{ SetValue((int)PersonFieldIndex.Id, value); }
		}

		/// <summary>The Name property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."Name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.Name, true); }
			set	{ SetValue((int)PersonFieldIndex.Name, value); }
		}

		/// <summary>The LastName property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."LastName".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String LastName
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.LastName, true); }
			set	{ SetValue((int)PersonFieldIndex.LastName, value); }
		}

		/// <summary>The BirthDate property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."BirthDate".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime BirthDate
		{
			get { return (System.DateTime)GetValue((int)PersonFieldIndex.BirthDate, true); }
			set	{ SetValue((int)PersonFieldIndex.BirthDate, value); }
		}

		/// <summary>The Gender property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."Gender".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 2.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Gender
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.Gender, true); }
			set	{ SetValue((int)PersonFieldIndex.Gender, value); }
		}

		/// <summary>The Code property of the Entity Person<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Person"."Code".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Code
		{
			get { return (System.String)GetValue((int)PersonFieldIndex.Code, true); }
			set	{ SetValue((int)PersonFieldIndex.Code, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'AddressEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(AddressEntity))]
		public virtual EntityCollection<AddressEntity> Address { get { return GetOrCreateEntityCollection<AddressEntity, AddressEntityFactory>("Person", true, false, ref _address); } }

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END

	}
}

namespace Stud1
{
	public enum PersonFieldIndex
	{
		///<summary>Id. </summary>
		Id,
		///<summary>Name. </summary>
		Name,
		///<summary>LastName. </summary>
		LastName,
		///<summary>BirthDate. </summary>
		BirthDate,
		///<summary>Gender. </summary>
		Gender,
		///<summary>Code. </summary>
		Code,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace Stud1.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Person. </summary>
	public partial class PersonRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between PersonEntity and AddressEntity over the 1:n relation they have, using the relation between the fields: Person.Id - Address.PersonId</summary>
		public virtual IEntityRelation AddressEntityUsingPersonId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "Address", true, new[] { PersonFields.Id, AddressFields.PersonId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticPersonRelations
	{
		internal static readonly IEntityRelation AddressEntityUsingPersonIdStatic = new PersonRelations().AddressEntityUsingPersonId;

		/// <summary>CTor</summary>
		static StaticPersonRelations() { }
	}
}
